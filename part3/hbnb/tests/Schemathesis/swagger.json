{
    "swagger": "2.0",
    "basePath": "/",
    "paths": {
        "/api/v1/amenities/": {
            "post": {
                "responses": {
                    "403": {
                        "description": "Admin privileges required"
                    },
                    "400": {
                        "description": "Amenity already exists or invalid input data"
                    },
                    "201": {
                        "description": "Amenity successfully created"
                    }
                },
                "summary": "Register a new amenity",
                "operationId": "post_amenity_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Amenity"
                        }
                    }
                ],
                "tags": [
                    "amenities"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "List of amenities retrieved successfully"
                    }
                },
                "summary": "Get a list of amenities",
                "operationId": "get_amenity_list",
                "tags": [
                    "amenities"
                ]
            }
        },
        "/api/v1/amenities/{amenity_id}": {
            "parameters": [
                {
                    "name": "amenity_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Amenity not found"
                    },
                    "200": {
                        "description": "Amenity details retrieved successfully"
                    }
                },
                "summary": "Get amenity details by ID",
                "operationId": "get_amenity_resource",
                "tags": [
                    "amenities"
                ]
            },
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid input data"
                    },
                    "404": {
                        "description": "Amenity not found"
                    },
                    "200": {
                        "description": "Amenity updated successfully"
                    }
                },
                "summary": "Update an amenity's information",
                "operationId": "put_amenity_resource",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Amenity"
                        }
                    }
                ],
                "tags": [
                    "amenities"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Amenity not found"
                    },
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "Amenity deleted successfully"
                    }
                },
                "summary": "Delete an amenity",
                "operationId": "delete_amenity_resource",
                "tags": [
                    "amenities"
                ]
            }
        },
        "/api/v1/bookings/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "List of bookings retrieved successfully"
                    }
                },
                "summary": "Retrieve a list of all bookings",
                "operationId": "get_booking_list",
                "tags": [
                    "bookings"
                ]
            }
        },
        "/api/v1/bookings/places/{place_id}/booking": {
            "parameters": [
                {
                    "name": "place_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Place not found"
                    },
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "List of booking for the place retrieved successfully"
                    }
                },
                "summary": "Get all bookings for a specific place",
                "operationId": "get_place_booking_list",
                "tags": [
                    "bookings"
                ]
            }
        },
        "/api/v1/bookings/places/{place_id}/pending_booking": {
            "parameters": [
                {
                    "name": "place_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Place not found"
                    },
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "List of booking for the place retrieved successfully"
                    }
                },
                "summary": "Get all pending bookings for a specific place",
                "operationId": "get_place_booking_list",
                "tags": [
                    "bookings"
                ]
            }
        },
        "/api/v1/bookings/users/{user_id}/booking": {
            "parameters": [
                {
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "List of booking of the user retrieved successfully"
                    }
                },
                "summary": "Get all bookings of a user",
                "operationId": "get_user_booking_list",
                "tags": [
                    "bookings"
                ]
            }
        },
        "/api/v1/bookings/{booking_id}": {
            "parameters": [
                {
                    "name": "booking_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Booking not found"
                    },
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "Booking details retrieved successfully"
                    }
                },
                "summary": "Get booking details by ID",
                "operationId": "get_booking_resource",
                "tags": [
                    "bookings"
                ]
            },
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid input data or UUID format"
                    },
                    "404": {
                        "description": "Booking not found"
                    },
                    "200": {
                        "description": "Booking updated successfully"
                    }
                },
                "summary": "Update a booking's information",
                "operationId": "put_booking_resource",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BookingUpdate"
                        }
                    }
                ],
                "tags": [
                    "bookings"
                ]
            }
        },
        "/api/v1/bookings/{place_id}": {
            "parameters": [
                {
                    "name": "place_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid input data"
                    },
                    "201": {
                        "description": "Booking succesfully created"
                    }
                },
                "summary": "Create a new booking",
                "operationId": "post_booking_create",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Booking"
                        }
                    }
                ],
                "tags": [
                    "bookings"
                ]
            }
        },
        "/api/v1/places/": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "403": {
                        "description": "User must be connected to create a place"
                    },
                    "201": {
                        "description": "Place successfully created"
                    }
                },
                "summary": "Create a new place",
                "operationId": "post_place_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Place"
                        }
                    }
                ],
                "tags": [
                    "places"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "No places found"
                    },
                    "200": {
                        "description": "Places found"
                    }
                },
                "summary": "Get a list of all places",
                "operationId": "get_place_list",
                "tags": [
                    "places"
                ]
            }
        },
        "/api/v1/places/{place_id}": {
            "parameters": [
                {
                    "name": "place_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Place not found"
                    },
                    "200": {
                        "description": "Place(s) found"
                    }
                },
                "summary": "Get a place by ID",
                "operationId": "get_place_resource",
                "tags": [
                    "places"
                ]
            },
            "put": {
                "responses": {
                    "404": {
                        "description": "Place not found"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "400": {
                        "description": "Invalid input or UUID"
                    },
                    "200": {
                        "description": "Place successfully updated"
                    }
                },
                "summary": "Method to update a place",
                "operationId": "put_place_resource",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PlaceUpdate"
                        }
                    }
                ],
                "tags": [
                    "places"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Place not found"
                    },
                    "401": {
                        "description": "Invalid credentials"
                    },
                    "400": {
                        "description": "Invalid ID"
                    },
                    "200": {
                        "description": "Place successfully deleted"
                    }
                },
                "summary": "Method to delete a place",
                "operationId": "delete_place_resource",
                "tags": [
                    "places"
                ]
            }
        },
        "/api/v1/reviews/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "List of reviews retrieved successfully"
                    }
                },
                "summary": "Retrieve a list of all reviews",
                "operationId": "get_review_list",
                "tags": [
                    "reviews"
                ]
            }
        },
        "/api/v1/reviews/from_booking/{booking_id}": {
            "parameters": [
                {
                    "name": "booking_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "404": {
                        "description": "Place not found"
                    },
                    "403": {
                        "description": "Permission error"
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "201": {
                        "description": "Review successfully created"
                    }
                },
                "summary": "Register a new review",
                "operationId": "post_create_review",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Review"
                        }
                    }
                ],
                "tags": [
                    "reviews"
                ]
            }
        },
        "/api/v1/reviews/places/{place_id}/reviews": {
            "parameters": [
                {
                    "name": "place_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Place not found"
                    },
                    "400": {
                        "description": "Invalid UUID format"
                    },
                    "200": {
                        "description": "List of reviews for the place retrieved successfully"
                    }
                },
                "summary": "Get all reviews for a specific place",
                "operationId": "get_place_review_list",
                "tags": [
                    "reviews"
                ]
            }
        },
        "/api/v1/reviews/{review_id}": {
            "parameters": [
                {
                    "name": "review_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Review not found"
                    },
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "Review details retrieved successfully"
                    }
                },
                "summary": "Get review details by ID",
                "operationId": "get_review_resource",
                "tags": [
                    "reviews"
                ]
            },
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid input data or UUID format"
                    },
                    "403": {
                        "description": "Permission error"
                    },
                    "404": {
                        "description": "Review not found"
                    },
                    "200": {
                        "description": "Review updated successfully"
                    }
                },
                "summary": "Update a review's information",
                "operationId": "put_review_resource",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Review"
                        }
                    }
                ],
                "tags": [
                    "reviews"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Review not found"
                    },
                    "403": {
                        "description": "Permission error"
                    },
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "Review deleted successfully"
                    }
                },
                "summary": "Delete a review",
                "operationId": "delete_review_resource",
                "tags": [
                    "reviews"
                ]
            }
        },
        "/api/v1/users/": {
            "post": {
                "responses": {
                    "400": {
                        "description": "Email already registered or invalid input"
                    },
                    "201": {
                        "description": "User successfully created"
                    }
                },
                "summary": "Register new user",
                "operationId": "post_user_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "tags": [
                    "auth"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "200": {
                        "description": "User(s) found"
                    }
                },
                "summary": "Get all users or by email query",
                "operationId": "get_user_list",
                "parameters": [
                    {
                        "description": "Filter user by email (optional)",
                        "name": "email",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/v1/users/admin_creation": {
            "post": {
                "responses": {
                    "401": {
                        "description": "You are not allowed to create an admin"
                    },
                    "400": {
                        "description": "Email already registered or invalid input"
                    },
                    "201": {
                        "description": "Admin successfully created"
                    }
                },
                "operationId": "post_admin_creation",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/v1/users/login": {
            "post": {
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Bad credentials"
                    },
                    "400": {
                        "description": "Pydantic validation error"
                    },
                    "201": {
                        "description": "Token created"
                    }
                },
                "summary": "Login the user",
                "operationId": "post_login",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Login"
                        }
                    }
                ],
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/v1/users/logout": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_logout",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/v1/users/logout_refresh": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_logout_refresh",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/v1/users/refresh": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "post_token_refresh",
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/v1/users/{user_id}": {
            "parameters": [
                {
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid UUID format"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "200": {
                        "description": "user details retrieved successfully"
                    }
                },
                "summary": "Get user details by ID",
                "operationId": "get_user_resource",
                "tags": [
                    "auth"
                ]
            },
            "put": {
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "403": {
                        "description": "Permission error"
                    },
                    "400": {
                        "description": "Invalid input or UUID format"
                    },
                    "200": {
                        "description": "User successfully updated"
                    }
                },
                "summary": "Update an existing user",
                "operationId": "put_user_resource",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserUpdate"
                        }
                    }
                ],
                "tags": [
                    "auth"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "403": {
                        "description": "Permission error"
                    },
                    "400": {
                        "description": "Invalide UUID format"
                    },
                    "200": {
                        "description": "User deleted successfully"
                    }
                },
                "operationId": "delete_user_resource",
                "tags": [
                    "auth"
                ]
            }
        }
    },
    "info": {
        "title": "HBnB API",
        "version": "1.0",
        "description": "HBnB Application API"
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "Bearer Auth": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": "Enter 'Bearer' + your token here"
        }
    },
    "security": [
        {
            "Bearer Auth": []
        }
    ],
    "tags": [
        {
            "name": "auth",
            "description": "Authentication operations"
        },
        {
            "name": "amenities",
            "description": "Amenity operations"
        },
        {
            "name": "places",
            "description": "Places operations"
        },
        {
            "name": "reviews",
            "description": "Review operations"
        },
        {
            "name": "bookings",
            "description": "Booking operations"
        }
    ],
    "definitions": {
        "User": {
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "description": "First name of user"
                },
                "last_name": {
                    "type": "string",
                    "description": "Last name of user"
                },
                "email": {
                    "type": "string",
                    "description": "Email of user"
                },
                "password": {
                    "type": "string",
                    "description": "Password of user"
                },
                "photo_url": {
                    "type": "string",
                    "description": "Avatar of user"
                }
            },
            "type": "object"
        },
        "UserUpdate": {
            "properties": {
                "first_name": {
                    "type": "string",
                    "description": "First name of user"
                },
                "last_name": {
                    "type": "string",
                    "description": "Last name of user"
                },
                "email": {
                    "type": "string",
                    "description": "Email of user"
                },
                "password": {
                    "type": "string",
                    "description": "Password of user"
                },
                "photo_url": {
                    "type": "string",
                    "description": "Avatar of user"
                }
            },
            "type": "object"
        },
        "Login": {
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User email"
                },
                "password": {
                    "type": "string",
                    "description": "User password"
                }
            },
            "type": "object"
        },
        "Amenity": {
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the amenity"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the amenity"
                }
            },
            "type": "object"
        },
        "Place": {
            "required": [
                "description",
                "latitude",
                "longitude",
                "price",
                "title"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the place"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the place"
                },
                "price": {
                    "type": "number",
                    "description": "The price of the place"
                },
                "latitude": {
                    "type": "number",
                    "description": "The latitude of the place"
                },
                "longitude": {
                    "type": "number",
                    "description": "The longitude of the place"
                },
                "amenity_ids": {
                    "type": "array",
                    "description": "List of amenity IDs",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "PlaceUpdate": {
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the place"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the place"
                },
                "price": {
                    "type": "number",
                    "description": "The price of the place"
                },
                "latitude": {
                    "type": "number",
                    "description": "The latitude of the place"
                },
                "longitude": {
                    "type": "number",
                    "description": "The longitude of the place"
                },
                "amenity_ids": {
                    "type": "array",
                    "description": "List of amenity IDs",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "Review": {
            "required": [
                "comment",
                "rating"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Text of the review"
                },
                "rating": {
                    "type": "number",
                    "description": "Rating of the place (1-5)"
                }
            },
            "type": "object"
        },
        "Booking": {
            "required": [
                "end_date",
                "start_date"
            ],
            "properties": {
                "start_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date"
                },
                "end_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date"
                }
            },
            "type": "object"
        },
        "BookingUpdate": {
            "properties": {
                "start_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date"
                },
                "end_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date"
                },
                "status": {
                    "type": "string",
                    "description": "Booking status (editable only by owner)",
                    "example": "PENDING",
                    "enum": [
                        "PENDING",
                        "DONE",
                        "CANCELLED"
                    ]
                }
            },
            "type": "object"
        }
    },
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}
